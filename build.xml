<?xml version="1.0"?>
<!-- $Id: build.xml 15309 2008-07-19 17:04:43Z linus $ -->

<!--
For information about ArgoUML, see http://argouml.tigris.org

For information about this argouml-enki module, 
see http://argouml-enki.tigris.org
-->

<project basedir="." default="install" name="argouml-enki">
<description>
***************************** argouml-enki module *****************************
The argouml-enki module provides Enki repository persistence support for 
ArgoUML.
</description>

  <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->
  <target name="init"
         description="initialize the Ant script environment for the other targets">
    <tstamp/>

    <property file="build.properties"/>
    <property file="module.properties"/>
    <property file="local.properties"/>

    <property name="Name" value="ArgoModule-${argo.module.name}"/>
    <property name="name" value="argomodule-${argo.module.name}"/>

    <property name="module.root" value="${basedir}"/>
    <property name="module.src.dir" value="${module.root}/src"/>
    <property name="module.src_generated.dir" value="${module.root}/src_generated"/>
    <property name="module.tests.src" value="${module.root}/tests"/>

    <property name="module.lib.dir" value="${module.root}/lib"/>

    <property name="module.build.dir" value="${module.root}/build"/>
    <property name="module.build.dest" value="${module.build.dir}/classes"/>
    <property name="module.tests.build" value="${module.build.dir}/tests"/>
    <property name="module.tests.classes" value="${module.tests.build}/classes"/>
    <property name="module.tests.reports" value="${module.tests.build}/reports"/>
    <property name="argo.base.dir" value="${basedir}/../argouml"/>
    <property name="argo.root.dir" value="${argo.base.dir}/src"/>
    <property name="argo.app.dir" value="${argo.root.dir}/argouml-app"/>

    <!-- Try to figure out where main ArgoUML tools directory is -->
    <property name="tool.test.file" value="checkstyle/java.header"/>
    <available file="${argo.root.dir}/argouml-core-tools/${tool.test.file}" 
    	type="file" property="argo.tools.dir" value="${argo.root.dir}/argouml-core-tools"/>
    <available file="${argo.root.dir}/../tools/${tool.test.file}" 
    	type="file" property="argo.tools.dir" value="${argo.root.dir}/../tools"/>
    <!-- figure out where main ArgoUML build directory is -->
    <!-- TODO: This probably needs to reference the packaging directory -->
    <available file="${argo.root.dir}/argouml-build/build" 
    	type="dir" property="argo.build.dir" value="${argo.root.dir}/argouml-build/build"/>
    <available file="${argo.root.dir}/build" 
    	type="dir" property="argo.build.dir" value="${argo.root.dir}/build"/>

    <property name="argo.build.dest" value="${argo.build.dir}/classes"/>
    <property name="argo.jarfile" value="${argo.build.dir}/argouml.jar"/>
    <property name="module.jarfile.name" value="${argo.module.jarfile}.jar"/>
    <property name="module.jarfile"
              value="${module.build.dir}/${module.jarfile.name}"/>

    <!-- Load ArgoUML properties, including the version -->
    <!-- we really need an absolute path for argo.root.dir -->
    <!-- if it is set in a property file before now, it must be absolute -->
    <property file="${override.build.properties}"/>
    <!-- If not set by the override file. -->
    <property name="argo.src.dir" value="${argo.app.dir}/src"/>

    <property name="junit.jar.path" value="${argo.tools.dir}/junit-3.8.2/junit.jar"/>
 
    <property name="log4j.jar.path" 
	      value="{argo.build.dir}/log4j.jar"/>
    <property file="${argo.src.dir}/default.properties"/>
   
    <echo message="${argo.root.dir} ${argo.src.dir} ${junit.jar.path} ${ant.home}"/>

    <property name="debug" value="on"/>
    <property name="optimize" value="on"/>
    <property name="deprecation" value="on"/>

    <property name="module.version" value="${argo.core.version}-${DSTAMP}-${TSTAMP}"/>
    <echo message="Module version: ${module.version}"/>

    <property name="argouml-model.build.dir" value="${argo.basedir}/src/model/build"/>
    <property name="argouml-model-mdr.build.dir" value="${argo.basedir}/src/model-mdr/build"/>

    <path id="module.compile.classpath">
        <pathelement location="${argo.build.dir}/argouml.jar"/>
        <pathelement location="${ocl-argo.jar.path}"/>
        <pathelement location="${gef.jar.path}"/>
        <pathelement location="${log4j.jar.path}"/>
        <pathelement location="${swidgets.jar.path}"/>
        <pathelement location="${commons-logging.jar.path}"/>
        <pathelement location="${antlrall.jar.path}"/>
        <pathelement location="${argo.build.dir}/argouml-model.jar"/>
    </path>

    <path id="module.compile-tests.classpath">
      <pathelement location="${module.build.dest}"/>
      <path refid="module.compile.classpath"/>
      <pathelement location="${junit.jar.path}"/>
    </path>

    <path id="module.run-tests.classpath">
      <pathelement location="${module.build.dest}"/>
      <pathelement location="${argo.build.dir}/argouml-mdr.jar"/>
      <path refid="module.compile-tests.classpath"/>
      <fileset dir="${argo.build.dir}">
        <include name="*.jar"/>
      </fileset>
    </path>

    <path id="ant.optional.classpath">
      <pathelement location="${ant.home}/libopt/ant-junit.jar"/>
      <pathelement location="${junit.jar.path}"/>
      <pathelement location="${jdepend.jar.path}"/>
      <pathelement location="${javasrc.jar.path}"/>
    </path>

    <taskdef classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask" name="junit">
      <classpath>
        <path refid="ant.optional.classpath"/>
      </classpath>
    </taskdef>

    <taskdef classname="org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator" name="junitreport">
      <classpath>
        <path refid="ant.optional.classpath"/>
      </classpath>
    </taskdef>

    <echo message="------------------- ${Name} ${module.version} ----------------"/>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the build directory                                        -->
  <!-- =================================================================== -->
  <target name="prepare" depends="init">
    <!-- create directories -->
    <echo message="Preparing the build directories"/>
    <mkdir dir="${module.build.dest}"/>
    <mkdir dir="${module.tests.classes}"/>
    <mkdir dir="${module.tests.reports}"/>
  </target>


  <!-- =================================================================== -->
  <!-- Compiles the source directory                                       -->
  <!-- =================================================================== -->
  <target name="compile" depends="prepare"
          description="compile the module source code"> 
    <available file="${argo.build.dir}/argouml.jar" property="argo.is.packaged"/>
    <fail unless="argo.is.packaged" 
      message="You must package ArgoUML first, e.g., argouml/src> build package"/>
    <javac destdir="${module.build.dest}"
           debug="${debug}"
           deprecation="${deprecation}"
           optimize="${optimize}"
           source="1.5"
           target="1.5" >
    	<src path="${module.src.dir}"/>
        <classpath>
            <path refid="module.compile.classpath"/>
        </classpath>
    </javac>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the class jar                                               -->
  <!-- =================================================================== -->
  <target name="jar" depends="init, compile" 
          description="create the module jar">
    <filter token="version" value="${module.version}"/>
    <jar jarfile="${module.jarfile}"
         basedir="${module.build.dest}"
         includes="org/argouml/**"
         excludes="*.txt,*.bat,*.xml,*.sh,${manifest}"
         manifest="${module.root}/META-INF/MANIFEST.MF"/>
  </target>

  <!-- =================================================================== -->
  <!-- Run ArgoUML from compiled sources                                   -->
  <!-- =================================================================== -->
  <target name="run" depends="init, jar" 
          description="run ArgoUML using the built module jar">
    <echo message="--- Executing ${Name} ---"/>
    <java classname="org.argouml.application.Main"
          fork="yes">
      <sysproperty key="log4j.configuration" value="org/argouml/resource/full_console.lcf"/>
      <sysproperty key="argouml.model.implementation"
        value="org.argouml.model.enki.EnkiModelImplementation"/>
      <classpath>
        <fileset dir="${module.build.dir}">
            <include name="${module.jarfile.name}" />
        </fileset>
        <path refid="module.compile.classpath"/>
      </classpath>
    </java>
  </target>

  <!-- =================================================================== -->
  <!-- Clean targets                                                       -->
  <!-- =================================================================== -->
  <target name="clean" depends="init" 
          description="cleanup all files and directories created by this build script">
    <delete file="${argo.build.dir}/ext/${module.jarfile.name}"/>
    <delete dir="${module.build.dir}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Move the jar file into the extension directory.                     -->
  <!-- =================================================================== -->
  <target name="install" depends="init, jar" 
          description="install the module in the developer build of ArgoUML">
    <copy todir="${argo.build.dir}/ext">
      <fileset dir="${module.build.dir}" includes="${module.jarfile.name}"/>
    </copy>
    <copy todir="${argo.build.dir}/ext">
      <fileset dir="${module.lib.dir}">
        <include name="${antlr-rt.jar}"/>
      </fileset>
    </copy>
  </target>


  <!-- =================================================================== -->
  <!-- Runs checkstyle to find style problems.                             -->
  <!-- =================================================================== -->
  <target name="checkstyle" depends="init"
          description="Run checkstyle on the java module.">
    <java classname="com.puppycrawl.tools.checkstyle.Main" failonerror="false" fork="true" maxmemory="32M">
      <sysproperty key="checkstyle.header.file" value="${argo.tools.dir}/checkstyle/java.header"/>
      <classpath>
        <pathelement location="${checkstyle.jar.path}"/>
        <pathelement location="${ant-xerces.jar.path}"/>
      </classpath>
      <arg value="-c"/>
      <arg value="${argo.tools.dir}/checkstyle/checkstyle_argouml.xml"/>
      <arg value="-r"/>
      <arg value="${module.src.dir}"/>
      <arg value="-r"/>
      <arg value="${module.tests.dir}"/>
    </java>
  </target>


  <!-- =================================================================== -->
  <!-- Compiles the tests directory                                        -->
  <!-- =================================================================== -->
  <target name="compile-tests" depends="compile"> 

    <echo message="Compiling the unit tests"/>
    
    <!-- antcall target="copy-tests-resources"/ -->

    <javac srcdir="${module.tests.src}"
           destdir="${module.tests.classes}"
           debug="true"
           deprecation="false"
           optimize="false"
           source="1.5"
           target="1.5">
      <classpath>
        <path refid="module.compile-tests.classpath"/>
      </classpath>
     </javac>
  </target>

  <!-- =================================================================== -->
  <!-- Run the module unit tests                                           -->
  <!-- =================================================================== -->
  <target name="tests" depends="init, compile-tests" 
          description="run the module unit tests"> 

    <echo message="running the unit tests"/>
    
    <junit errorproperty="junit.failure" fork="yes" haltonfailure="false" 
           maxmemory="48M" printsummary="true">
          <!-- use different log4j configuration for testing -->
      <sysproperty key="log4j.configuration" value="org/argouml/resource/full_console.lcf"/>
      <classpath>
        <path refid="module.run-tests.classpath"/>
        <pathelement location="${module.tests.classes}"/>
      </classpath>
      <formatter type="xml"/>
      <batchtest todir="${module.tests.reports}">
        <fileset dir="${module.tests.src}">
          <include name="org/argouml/**/Test*.java"/>
        </fileset>
      </batchtest>
    </junit>
    <antcall target="create-tests-report"/>
  </target>
  
  <target name="create-tests-report">
    <echo message="Creating unit tests report to ${module.tests.reports}/html/index.html"/>
    
    <junitreport todir="${module.tests.reports}">
      <fileset dir="${module.tests.reports}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${module.tests.reports}/html"/>
    </junitreport>
  </target>

</project>
